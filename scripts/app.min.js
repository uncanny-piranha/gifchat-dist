'use strict';

/**
 * @ngdoc overview
 * @name gifchatClientApp
 * @description
 * # gifchatClientApp
 *
 * Main module of the application.
 */
angular
  .module('gifchatClientApp', [
    'ngAnimate',
    'ngCookies',
    'ngResource',
    'ngRoute',
    'ngSanitize',
    'ngTouch',
    'firebase'
  ])
  .config(function ($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'app/core/views/main.html',
        controller: 'MainCtrl'
      })
      .when('/chatroom', {
        templateUrl: 'app/core/views/chatroom.html',
        controller: 'ChatroomCtrl'
      })
      .otherwise({
        redirectTo: '/'
      });
  });

;(function(){
  'use strict';

/**
 * @ngdoc function
 * @name gifchatClientApp.controller:AboutCtrl
 * @description
 * # AboutCtrl
 * Controller of the gifchatClientApp
 */

angular
  .module('gifchatClientApp')
  .controller('ChatroomCtrl', ChatroomCtrl);

  function ChatroomCtrl ($scope, Auth, $firebase, $location) {

    $scope.username = Auth.getCurrentUser();
    $scope.userMessage;
    $scope.newUser;
    $scope.isLoggedIn = Auth.isLoggedIn;
    $scope.privateMessage = false;
    $scope.privateMessageHash;
    $scope.privateMessageURL;
    $scope.usernameFriend;
    $scope.friendsName;
    $scope.chosenPrivate=false;
    $scope.active=false;
    $scope.added=false;

    var linkRef = new Firebase("https://sizzling-fire-1984.firebaseio.com/usernames/"+$scope.username+ "/" +"messages");
    var sync = $firebase(linkRef);
    $scope.messages = sync.$asArray();

    $scope.addMessage = function(text) {
      // should post to our server
      Auth.sendMessage($scope.friendsName, $scope.username, text);
    };

    $scope.setFriendUsername = function(user){
      $scope.friendsName = user;
      $scope.chosenPrivate=true;
      var userRef = new Firebase("https://sizzling-fire-1984.firebaseio.com/usernames/" + $scope.username + '/' +"messages"+ "/" + user);
      var otherUserRef = new Firebase("https://sizzling-fire-1984.firebaseio.com/usernames/" + user + '/' +"messages"+ "/" + $scope.username);
      var otherSync = $firebase(otherUserRef);
      var synchy = $firebase(userRef);
      $scope.friendsMessages = otherSync.$asArray();
      $scope.privateMessages = synchy.$asArray();
    };
    $scope.addFriend = function() {
      $scope.added = !$scope.added;
    };

    $scope.activate = function(){
      $scope.active = !$scope.active;
    };

    $scope.logout = function() {
      Auth.logout();
      $location.path('/');
    };
  }

})();

'use strict';

/**
 * @ngdoc function
 * @name gifchatClientApp.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the gifchatClientApp
 */
angular.module('gifchatClientApp')
  .controller('MainCtrl', function ($scope, $http, Auth, $location) {

    $scope.user = {};
    $scope.errors = {};
    $scope.isLoggedIn = Auth.isLoggedIn;
    $scope.isAdmin = Auth.isAdmin;
    $scope.getCurrentUser = Auth.getCurrentUser;
    $scope.activeLogin=false;
    $scope.activeSignup=false;

    $scope.register = function(form) {
      $scope.submitted = true;

      if(form.$valid) {
        Auth.createUser({
          username: $scope.user.username,
          password: $scope.user.password
        })
        .then( function() {
          // Account created, redirect to home
          $location.path('/chatroom');
        })
        .catch( function(err) {
          err = err.data;
          $scope.errors = {};

          // Update validity of form fields that match the mongoose errors
          angular.forEach(err.errors, function(error, field) {
            form[field].$setValidity('mongoose', false);
            $scope.errors[field] = error.message;
          });
        });
      }
    };

    $scope.login = function(form) {
      $scope.submitted = true;

      if(form.$valid) {
        Auth.login({
          username: $scope.user.username,
          password: $scope.user.password
        })
        .then( function() {
          // Logged in, redirect to home
          $location.path('/chatroom');
        })
        .catch( function(err) {
          $scope.errors.other = err.message;
        });
      }
    };
    $scope.activateLogin = function(){
      $scope.activeLogin = !$scope.activeLogin;
    }
    $scope.activateSignup = function(){
      $scope.activeSignup = !$scope.activeSignup;
    }
  });

'use strict';

/**
 * Removes server error when user updates input
 */
angular.module('gifchatClientApp')
  .directive('mongooseError', function () {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function(scope, element, attrs, ngModel) {
        element.on('keydown', function() {
          return ngModel.$setValidity('mongoose', true);
        });
      }
    };
  });
'use strict';

angular.module('gifchatClientApp')
  .factory('Auth', function Auth($location, $rootScope, $http, $cookieStore, $q) {
    var currentUser = '';
    if($cookieStore.get('token')) {
      currentUser = $cookieStore.get('username');
    }

    return {

      /**
       * Authenticate user and save token
       *
       */
      login: function(user) {

        return $http.post('http://gifserver.azurewebsites.net/users/login', {
          username: user.username,
          password: user.password
        }).
        success(function(data) {
          $cookieStore.put('token', data.token);
          $cookieStore.put('username', data.username);
          currentUser = data.username;
        })
        .error(function(err){
          console.log(err);
        });
      },

      /**
       * Delete access token and user info
       *
       */
      logout: function() {
        $cookieStore.remove('token');
        currentUser = '';
      },

      /**
       * Create a new user
       *
       */
      createUser: function(user) {
        return $http.post('http://gifserver.azurewebsites.net/users/signup', {
          username: user.username,
          password: user.password
        })
        .success(function(data){
          $cookieStore.put('token', data.token);
          $cookieStore.put('username', data.username);
          currentUser = data.username;
        });
      },


      /**
       * Gets all available info on authenticated user
       *
       */
      getCurrentUser: function() {
        return currentUser;
      },

      /**
       * Check if a user is logged in
       *
       */
      isLoggedIn: function() {
        if ($cookieStore.get('token')) {
          return true;
        } else {
          return false;
        }
      },

      sendMessage: function(to, from, keyword) {
        return $http.post('http://gifserver.azurewebsites.net/gifs', {
          to: to,
          from: from,
          keyword: keyword
        })
        .error(function(err){
          console.log(err);
        });
      },
      /**
       * Get auth token
       */
      getToken: function() {
        return $cookieStore.get('token');
      }
    };
  });
